// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grabcut_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GrabCut {

namespace {

const ::google::protobuf::Descriptor* ImageMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageMaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMaskList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestResponse_ResponseCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_grabcut_5ftest_2eproto() {
  protobuf_AddDesc_grabcut_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grabcut_test.proto");
  GOOGLE_CHECK(file != NULL);
  ImageMask_descriptor_ = file->message_type(0);
  static const int ImageMask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, image_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, weight_),
  };
  ImageMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageMask_descriptor_,
      ImageMask::default_instance_,
      ImageMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageMask));
  ImageMaskList_descriptor_ = file->message_type(1);
  static const int ImageMaskList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskList, image_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskList, masks_),
  };
  ImageMaskList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageMaskList_descriptor_,
      ImageMaskList::default_instance_,
      ImageMaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageMaskList));
  TestResponse_descriptor_ = file->message_type(2);
  static const int TestResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, image_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, recall_),
  };
  TestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestResponse_descriptor_,
      TestResponse::default_instance_,
      TestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestResponse));
  TestResponse_ResponseCode_descriptor_ = TestResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grabcut_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageMask_descriptor_, &ImageMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageMaskList_descriptor_, &ImageMaskList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestResponse_descriptor_, &TestResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_grabcut_5ftest_2eproto() {
  delete ImageMask::default_instance_;
  delete ImageMask_reflection_;
  delete ImageMaskList::default_instance_;
  delete ImageMaskList_reflection_;
  delete TestResponse::default_instance_;
  delete TestResponse_reflection_;
}

void protobuf_AddDesc_grabcut_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022grabcut_test.proto\022\007GrabCut\"Q\n\tImageMa"
    "sk\022\020\n\010image_id\030\001 \001(\006\022\022\n\nimage_mask\030\002 \001(\014"
    "\022\016\n\006height\030\003 \001(\006\022\016\n\006weight\030\004 \001(\006\"H\n\rImag"
    "eMaskList\022\024\n\014image_set_id\030\001 \001(\t\022!\n\005masks"
    "\030\002 \003(\0132\022.GrabCut.ImageMask\"\257\001\n\014TestRespo"
    "nse\0220\n\004code\030\001 \001(\0162\".GrabCut.TestResponse"
    ".ResponseCode\022\021\n\terror_msg\030\002 \001(\t\022\024\n\014imag"
    "e_set_id\030\003 \001(\t\022\021\n\tprecision\030\004 \001(\001\022\016\n\006rec"
    "all\030\005 \001(\001\"!\n\014ResponseCode\022\006\n\002OK\020\000\022\t\n\005ERR"
    "OR\020\001", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grabcut_test.proto", &protobuf_RegisterTypes);
  ImageMask::default_instance_ = new ImageMask();
  ImageMaskList::default_instance_ = new ImageMaskList();
  TestResponse::default_instance_ = new TestResponse();
  ImageMask::default_instance_->InitAsDefaultInstance();
  ImageMaskList::default_instance_->InitAsDefaultInstance();
  TestResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grabcut_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grabcut_5ftest_2eproto {
  StaticDescriptorInitializer_grabcut_5ftest_2eproto() {
    protobuf_AddDesc_grabcut_5ftest_2eproto();
  }
} static_descriptor_initializer_grabcut_5ftest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ImageMask::kImageIdFieldNumber;
const int ImageMask::kImageMaskFieldNumber;
const int ImageMask::kHeightFieldNumber;
const int ImageMask::kWeightFieldNumber;
#endif  // !_MSC_VER

ImageMask::ImageMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageMask::InitAsDefaultInstance() {
}

ImageMask::ImageMask(const ImageMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageMask::SharedCtor() {
  _cached_size_ = 0;
  image_id_ = GOOGLE_ULONGLONG(0);
  image_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = GOOGLE_ULONGLONG(0);
  weight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageMask::~ImageMask() {
  SharedDtor();
}

void ImageMask::SharedDtor() {
  if (image_mask_ != &::google::protobuf::internal::kEmptyString) {
    delete image_mask_;
  }
  if (this != default_instance_) {
  }
}

void ImageMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMask_descriptor_;
}

const ImageMask& ImageMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grabcut_5ftest_2eproto();  return *default_instance_;
}

ImageMask* ImageMask::default_instance_ = NULL;

ImageMask* ImageMask::New() const {
  return new ImageMask;
}

void ImageMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    image_id_ = GOOGLE_ULONGLONG(0);
    if (has_image_mask()) {
      if (image_mask_ != &::google::protobuf::internal::kEmptyString) {
        image_mask_->clear();
      }
    }
    height_ = GOOGLE_ULONGLONG(0);
    weight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 image_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &image_id_)));
          set_has_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_mask;
        break;
      }
      
      // optional bytes image_mask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }
      
      // optional fixed64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_weight;
        break;
      }
      
      // optional fixed64 weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 image_id = 1;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->image_id(), output);
  }
  
  // optional bytes image_mask = 2;
  if (has_image_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->image_mask(), output);
  }
  
  // optional fixed64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->height(), output);
  }
  
  // optional fixed64 weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 image_id = 1;
  if (has_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->image_id(), target);
  }
  
  // optional bytes image_mask = 2;
  if (has_image_mask()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_mask(), target);
  }
  
  // optional fixed64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->height(), target);
  }
  
  // optional fixed64 weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageMask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 image_id = 1;
    if (has_image_id()) {
      total_size += 1 + 8;
    }
    
    // optional bytes image_mask = 2;
    if (has_image_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image_mask());
    }
    
    // optional fixed64 height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 weight = 4;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageMask::MergeFrom(const ImageMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_image_mask()) {
      set_image_mask(from.image_mask());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMask::CopyFrom(const ImageMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMask::IsInitialized() const {
  
  return true;
}

void ImageMask::Swap(ImageMask* other) {
  if (other != this) {
    std::swap(image_id_, other->image_id_);
    std::swap(image_mask_, other->image_mask_);
    std::swap(height_, other->height_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMask_descriptor_;
  metadata.reflection = ImageMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageMaskList::kImageSetIdFieldNumber;
const int ImageMaskList::kMasksFieldNumber;
#endif  // !_MSC_VER

ImageMaskList::ImageMaskList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageMaskList::InitAsDefaultInstance() {
}

ImageMaskList::ImageMaskList(const ImageMaskList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageMaskList::SharedCtor() {
  _cached_size_ = 0;
  image_set_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageMaskList::~ImageMaskList() {
  SharedDtor();
}

void ImageMaskList::SharedDtor() {
  if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
    delete image_set_id_;
  }
  if (this != default_instance_) {
  }
}

void ImageMaskList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMaskList_descriptor_;
}

const ImageMaskList& ImageMaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grabcut_5ftest_2eproto();  return *default_instance_;
}

ImageMaskList* ImageMaskList::default_instance_ = NULL;

ImageMaskList* ImageMaskList::New() const {
  return new ImageMaskList;
}

void ImageMaskList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_set_id()) {
      if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
        image_set_id_->clear();
      }
    }
  }
  masks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageMaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_set_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_set_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_set_id().data(), this->image_set_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masks;
        break;
      }
      
      // repeated .GrabCut.ImageMask masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageMaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_set_id = 1;
  if (has_image_set_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_set_id().data(), this->image_set_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_set_id(), output);
  }
  
  // repeated .GrabCut.ImageMask masks = 2;
  for (int i = 0; i < this->masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->masks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageMaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string image_set_id = 1;
  if (has_image_set_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_set_id().data(), this->image_set_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_set_id(), target);
  }
  
  // repeated .GrabCut.ImageMask masks = 2;
  for (int i = 0; i < this->masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->masks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageMaskList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_set_id = 1;
    if (has_image_set_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_set_id());
    }
    
  }
  // repeated .GrabCut.ImageMask masks = 2;
  total_size += 1 * this->masks_size();
  for (int i = 0; i < this->masks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMaskList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageMaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageMaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageMaskList::MergeFrom(const ImageMaskList& from) {
  GOOGLE_CHECK_NE(&from, this);
  masks_.MergeFrom(from.masks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_set_id()) {
      set_image_set_id(from.image_set_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageMaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMaskList::CopyFrom(const ImageMaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMaskList::IsInitialized() const {
  
  return true;
}

void ImageMaskList::Swap(ImageMaskList* other) {
  if (other != this) {
    std::swap(image_set_id_, other->image_set_id_);
    masks_.Swap(&other->masks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageMaskList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMaskList_descriptor_;
  metadata.reflection = ImageMaskList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TestResponse_ResponseCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResponse_ResponseCode_descriptor_;
}
bool TestResponse_ResponseCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestResponse_ResponseCode TestResponse::OK;
const TestResponse_ResponseCode TestResponse::ERROR;
const TestResponse_ResponseCode TestResponse::ResponseCode_MIN;
const TestResponse_ResponseCode TestResponse::ResponseCode_MAX;
const int TestResponse::ResponseCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TestResponse::kCodeFieldNumber;
const int TestResponse::kErrorMsgFieldNumber;
const int TestResponse::kImageSetIdFieldNumber;
const int TestResponse::kPrecisionFieldNumber;
const int TestResponse::kRecallFieldNumber;
#endif  // !_MSC_VER

TestResponse::TestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestResponse::InitAsDefaultInstance() {
}

TestResponse::TestResponse(const TestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_set_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precision_ = 0;
  recall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponse::~TestResponse() {
  SharedDtor();
}

void TestResponse::SharedDtor() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
    delete image_set_id_;
  }
  if (this != default_instance_) {
  }
}

void TestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResponse_descriptor_;
}

const TestResponse& TestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grabcut_5ftest_2eproto();  return *default_instance_;
}

TestResponse* TestResponse::default_instance_ = NULL;

TestResponse* TestResponse::New() const {
  return new TestResponse;
}

void TestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_image_set_id()) {
      if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
        image_set_id_->clear();
      }
    }
    precision_ = 0;
    recall_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GrabCut.TestResponse.ResponseCode code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GrabCut::TestResponse_ResponseCode_IsValid(value)) {
            set_code(static_cast< ::GrabCut::TestResponse_ResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_set_id;
        break;
      }
      
      // optional string image_set_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_set_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_set_id().data(), this->image_set_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_precision;
        break;
      }
      
      // optional double precision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_recall;
        break;
      }
      
      // optional double recall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_recall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recall_)));
          set_has_recall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GrabCut.TestResponse.ResponseCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_msg(), output);
  }
  
  // optional string image_set_id = 3;
  if (has_image_set_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_set_id().data(), this->image_set_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_set_id(), output);
  }
  
  // optional double precision = 4;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precision(), output);
  }
  
  // optional double recall = 5;
  if (has_recall()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->recall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GrabCut.TestResponse.ResponseCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }
  
  // optional string image_set_id = 3;
  if (has_image_set_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_set_id().data(), this->image_set_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_set_id(), target);
  }
  
  // optional double precision = 4;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precision(), target);
  }
  
  // optional double recall = 5;
  if (has_recall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->recall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GrabCut.TestResponse.ResponseCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string error_msg = 2;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
    // optional string image_set_id = 3;
    if (has_image_set_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_set_id());
    }
    
    // optional double precision = 4;
    if (has_precision()) {
      total_size += 1 + 8;
    }
    
    // optional double recall = 5;
    if (has_recall()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestResponse::MergeFrom(const TestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_image_set_id()) {
      set_image_set_id(from.image_set_id());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_recall()) {
      set_recall(from.recall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResponse::CopyFrom(const TestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const {
  
  return true;
}

void TestResponse::Swap(TestResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(image_set_id_, other->image_set_id_);
    std::swap(precision_, other->precision_);
    std::swap(recall_, other->recall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestResponse_descriptor_;
  metadata.reflection = TestResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GrabCut

// @@protoc_insertion_point(global_scope)
