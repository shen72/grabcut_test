// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grabcut_test.proto

#ifndef PROTOBUF_grabcut_5ftest_2eproto__INCLUDED
#define PROTOBUF_grabcut_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace GrabCut {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_grabcut_5ftest_2eproto();
void protobuf_AssignDesc_grabcut_5ftest_2eproto();
void protobuf_ShutdownFile_grabcut_5ftest_2eproto();

class ImageMask;
class ImageMaskList;
class TestResponse;

enum TestResponse_ResponseCode {
  TestResponse_ResponseCode_OK = 0,
  TestResponse_ResponseCode_ERROR = 1
};
bool TestResponse_ResponseCode_IsValid(int value);
const TestResponse_ResponseCode TestResponse_ResponseCode_ResponseCode_MIN = TestResponse_ResponseCode_OK;
const TestResponse_ResponseCode TestResponse_ResponseCode_ResponseCode_MAX = TestResponse_ResponseCode_ERROR;
const int TestResponse_ResponseCode_ResponseCode_ARRAYSIZE = TestResponse_ResponseCode_ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestResponse_ResponseCode_descriptor();
inline const ::std::string& TestResponse_ResponseCode_Name(TestResponse_ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestResponse_ResponseCode_descriptor(), value);
}
inline bool TestResponse_ResponseCode_Parse(
    const ::std::string& name, TestResponse_ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestResponse_ResponseCode>(
    TestResponse_ResponseCode_descriptor(), name, value);
}
// ===================================================================

class ImageMask : public ::google::protobuf::Message {
 public:
  ImageMask();
  virtual ~ImageMask();
  
  ImageMask(const ImageMask& from);
  
  inline ImageMask& operator=(const ImageMask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMask& default_instance();
  
  void Swap(ImageMask* other);
  
  // implements Message ----------------------------------------------
  
  ImageMask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageMask& from);
  void MergeFrom(const ImageMask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 image_id = 1;
  inline bool has_image_id() const;
  inline void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  inline ::google::protobuf::uint64 image_id() const;
  inline void set_image_id(::google::protobuf::uint64 value);
  
  // optional bytes image_mask = 2;
  inline bool has_image_mask() const;
  inline void clear_image_mask();
  static const int kImageMaskFieldNumber = 2;
  inline const ::std::string& image_mask() const;
  inline void set_image_mask(const ::std::string& value);
  inline void set_image_mask(const char* value);
  inline void set_image_mask(const void* value, size_t size);
  inline ::std::string* mutable_image_mask();
  inline ::std::string* release_image_mask();
  
  // optional fixed64 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);
  
  // optional fixed64 weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline ::google::protobuf::uint64 weight() const;
  inline void set_weight(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:GrabCut.ImageMask)
 private:
  inline void set_has_image_id();
  inline void clear_has_image_id();
  inline void set_has_image_mask();
  inline void clear_has_image_mask();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 image_id_;
  ::std::string* image_mask_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_grabcut_5ftest_2eproto();
  friend void protobuf_AssignDesc_grabcut_5ftest_2eproto();
  friend void protobuf_ShutdownFile_grabcut_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ImageMask* default_instance_;
};
// -------------------------------------------------------------------

class ImageMaskList : public ::google::protobuf::Message {
 public:
  ImageMaskList();
  virtual ~ImageMaskList();
  
  ImageMaskList(const ImageMaskList& from);
  
  inline ImageMaskList& operator=(const ImageMaskList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMaskList& default_instance();
  
  void Swap(ImageMaskList* other);
  
  // implements Message ----------------------------------------------
  
  ImageMaskList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageMaskList& from);
  void MergeFrom(const ImageMaskList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string image_set_id = 1;
  inline bool has_image_set_id() const;
  inline void clear_image_set_id();
  static const int kImageSetIdFieldNumber = 1;
  inline const ::std::string& image_set_id() const;
  inline void set_image_set_id(const ::std::string& value);
  inline void set_image_set_id(const char* value);
  inline void set_image_set_id(const char* value, size_t size);
  inline ::std::string* mutable_image_set_id();
  inline ::std::string* release_image_set_id();
  
  // repeated .GrabCut.ImageMask masks = 2;
  inline int masks_size() const;
  inline void clear_masks();
  static const int kMasksFieldNumber = 2;
  inline const ::GrabCut::ImageMask& masks(int index) const;
  inline ::GrabCut::ImageMask* mutable_masks(int index);
  inline ::GrabCut::ImageMask* add_masks();
  inline const ::google::protobuf::RepeatedPtrField< ::GrabCut::ImageMask >&
      masks() const;
  inline ::google::protobuf::RepeatedPtrField< ::GrabCut::ImageMask >*
      mutable_masks();
  
  // @@protoc_insertion_point(class_scope:GrabCut.ImageMaskList)
 private:
  inline void set_has_image_set_id();
  inline void clear_has_image_set_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* image_set_id_;
  ::google::protobuf::RepeatedPtrField< ::GrabCut::ImageMask > masks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_grabcut_5ftest_2eproto();
  friend void protobuf_AssignDesc_grabcut_5ftest_2eproto();
  friend void protobuf_ShutdownFile_grabcut_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ImageMaskList* default_instance_;
};
// -------------------------------------------------------------------

class TestResponse : public ::google::protobuf::Message {
 public:
  TestResponse();
  virtual ~TestResponse();
  
  TestResponse(const TestResponse& from);
  
  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestResponse& default_instance();
  
  void Swap(TestResponse* other);
  
  // implements Message ----------------------------------------------
  
  TestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestResponse& from);
  void MergeFrom(const TestResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TestResponse_ResponseCode ResponseCode;
  static const ResponseCode OK = TestResponse_ResponseCode_OK;
  static const ResponseCode ERROR = TestResponse_ResponseCode_ERROR;
  static inline bool ResponseCode_IsValid(int value) {
    return TestResponse_ResponseCode_IsValid(value);
  }
  static const ResponseCode ResponseCode_MIN =
    TestResponse_ResponseCode_ResponseCode_MIN;
  static const ResponseCode ResponseCode_MAX =
    TestResponse_ResponseCode_ResponseCode_MAX;
  static const int ResponseCode_ARRAYSIZE =
    TestResponse_ResponseCode_ResponseCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseCode_descriptor() {
    return TestResponse_ResponseCode_descriptor();
  }
  static inline const ::std::string& ResponseCode_Name(ResponseCode value) {
    return TestResponse_ResponseCode_Name(value);
  }
  static inline bool ResponseCode_Parse(const ::std::string& name,
      ResponseCode* value) {
    return TestResponse_ResponseCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .GrabCut.TestResponse.ResponseCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::GrabCut::TestResponse_ResponseCode code() const;
  inline void set_code(::GrabCut::TestResponse_ResponseCode value);
  
  // optional string error_msg = 2;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  
  // optional string image_set_id = 3;
  inline bool has_image_set_id() const;
  inline void clear_image_set_id();
  static const int kImageSetIdFieldNumber = 3;
  inline const ::std::string& image_set_id() const;
  inline void set_image_set_id(const ::std::string& value);
  inline void set_image_set_id(const char* value);
  inline void set_image_set_id(const char* value, size_t size);
  inline ::std::string* mutable_image_set_id();
  inline ::std::string* release_image_set_id();
  
  // optional double precision = 4;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 4;
  inline double precision() const;
  inline void set_precision(double value);
  
  // optional double recall = 5;
  inline bool has_recall() const;
  inline void clear_recall();
  static const int kRecallFieldNumber = 5;
  inline double recall() const;
  inline void set_recall(double value);
  
  // @@protoc_insertion_point(class_scope:GrabCut.TestResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_image_set_id();
  inline void clear_has_image_set_id();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_recall();
  inline void clear_has_recall();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_msg_;
  ::std::string* image_set_id_;
  double precision_;
  double recall_;
  int code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_grabcut_5ftest_2eproto();
  friend void protobuf_AssignDesc_grabcut_5ftest_2eproto();
  friend void protobuf_ShutdownFile_grabcut_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageMask

// optional fixed64 image_id = 1;
inline bool ImageMask::has_image_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageMask::set_has_image_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageMask::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageMask::clear_image_id() {
  image_id_ = GOOGLE_ULONGLONG(0);
  clear_has_image_id();
}
inline ::google::protobuf::uint64 ImageMask::image_id() const {
  return image_id_;
}
inline void ImageMask::set_image_id(::google::protobuf::uint64 value) {
  set_has_image_id();
  image_id_ = value;
}

// optional bytes image_mask = 2;
inline bool ImageMask::has_image_mask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageMask::set_has_image_mask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageMask::clear_has_image_mask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageMask::clear_image_mask() {
  if (image_mask_ != &::google::protobuf::internal::kEmptyString) {
    image_mask_->clear();
  }
  clear_has_image_mask();
}
inline const ::std::string& ImageMask::image_mask() const {
  return *image_mask_;
}
inline void ImageMask::set_image_mask(const ::std::string& value) {
  set_has_image_mask();
  if (image_mask_ == &::google::protobuf::internal::kEmptyString) {
    image_mask_ = new ::std::string;
  }
  image_mask_->assign(value);
}
inline void ImageMask::set_image_mask(const char* value) {
  set_has_image_mask();
  if (image_mask_ == &::google::protobuf::internal::kEmptyString) {
    image_mask_ = new ::std::string;
  }
  image_mask_->assign(value);
}
inline void ImageMask::set_image_mask(const void* value, size_t size) {
  set_has_image_mask();
  if (image_mask_ == &::google::protobuf::internal::kEmptyString) {
    image_mask_ = new ::std::string;
  }
  image_mask_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageMask::mutable_image_mask() {
  set_has_image_mask();
  if (image_mask_ == &::google::protobuf::internal::kEmptyString) {
    image_mask_ = new ::std::string;
  }
  return image_mask_;
}
inline ::std::string* ImageMask::release_image_mask() {
  clear_has_image_mask();
  if (image_mask_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_mask_;
    image_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 height = 3;
inline bool ImageMask::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageMask::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageMask::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageMask::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 ImageMask::height() const {
  return height_;
}
inline void ImageMask::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional fixed64 weight = 4;
inline bool ImageMask::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageMask::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageMask::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageMask::clear_weight() {
  weight_ = GOOGLE_ULONGLONG(0);
  clear_has_weight();
}
inline ::google::protobuf::uint64 ImageMask::weight() const {
  return weight_;
}
inline void ImageMask::set_weight(::google::protobuf::uint64 value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// ImageMaskList

// optional string image_set_id = 1;
inline bool ImageMaskList::has_image_set_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageMaskList::set_has_image_set_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageMaskList::clear_has_image_set_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageMaskList::clear_image_set_id() {
  if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
    image_set_id_->clear();
  }
  clear_has_image_set_id();
}
inline const ::std::string& ImageMaskList::image_set_id() const {
  return *image_set_id_;
}
inline void ImageMaskList::set_image_set_id(const ::std::string& value) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(value);
}
inline void ImageMaskList::set_image_set_id(const char* value) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(value);
}
inline void ImageMaskList::set_image_set_id(const char* value, size_t size) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageMaskList::mutable_image_set_id() {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  return image_set_id_;
}
inline ::std::string* ImageMaskList::release_image_set_id() {
  clear_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_set_id_;
    image_set_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .GrabCut.ImageMask masks = 2;
inline int ImageMaskList::masks_size() const {
  return masks_.size();
}
inline void ImageMaskList::clear_masks() {
  masks_.Clear();
}
inline const ::GrabCut::ImageMask& ImageMaskList::masks(int index) const {
  return masks_.Get(index);
}
inline ::GrabCut::ImageMask* ImageMaskList::mutable_masks(int index) {
  return masks_.Mutable(index);
}
inline ::GrabCut::ImageMask* ImageMaskList::add_masks() {
  return masks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GrabCut::ImageMask >&
ImageMaskList::masks() const {
  return masks_;
}
inline ::google::protobuf::RepeatedPtrField< ::GrabCut::ImageMask >*
ImageMaskList::mutable_masks() {
  return &masks_;
}

// -------------------------------------------------------------------

// TestResponse

// optional .GrabCut.TestResponse.ResponseCode code = 1;
inline bool TestResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::GrabCut::TestResponse_ResponseCode TestResponse::code() const {
  return static_cast< ::GrabCut::TestResponse_ResponseCode >(code_);
}
inline void TestResponse::set_code(::GrabCut::TestResponse_ResponseCode value) {
  GOOGLE_DCHECK(::GrabCut::TestResponse_ResponseCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string error_msg = 2;
inline bool TestResponse::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestResponse::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestResponse::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestResponse::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& TestResponse::error_msg() const {
  return *error_msg_;
}
inline void TestResponse::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void TestResponse::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void TestResponse::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestResponse::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* TestResponse::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string image_set_id = 3;
inline bool TestResponse::has_image_set_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestResponse::set_has_image_set_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestResponse::clear_has_image_set_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestResponse::clear_image_set_id() {
  if (image_set_id_ != &::google::protobuf::internal::kEmptyString) {
    image_set_id_->clear();
  }
  clear_has_image_set_id();
}
inline const ::std::string& TestResponse::image_set_id() const {
  return *image_set_id_;
}
inline void TestResponse::set_image_set_id(const ::std::string& value) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(value);
}
inline void TestResponse::set_image_set_id(const char* value) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(value);
}
inline void TestResponse::set_image_set_id(const char* value, size_t size) {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  image_set_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestResponse::mutable_image_set_id() {
  set_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    image_set_id_ = new ::std::string;
  }
  return image_set_id_;
}
inline ::std::string* TestResponse::release_image_set_id() {
  clear_has_image_set_id();
  if (image_set_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_set_id_;
    image_set_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double precision = 4;
inline bool TestResponse::has_precision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestResponse::set_has_precision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestResponse::clear_has_precision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestResponse::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline double TestResponse::precision() const {
  return precision_;
}
inline void TestResponse::set_precision(double value) {
  set_has_precision();
  precision_ = value;
}

// optional double recall = 5;
inline bool TestResponse::has_recall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestResponse::set_has_recall() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestResponse::clear_has_recall() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestResponse::clear_recall() {
  recall_ = 0;
  clear_has_recall();
}
inline double TestResponse::recall() const {
  return recall_;
}
inline void TestResponse::set_recall(double value) {
  set_has_recall();
  recall_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GrabCut

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrabCut::TestResponse_ResponseCode>() {
  return ::GrabCut::TestResponse_ResponseCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grabcut_5ftest_2eproto__INCLUDED
